import { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
// import { useSelector } from 'react-redux';

import { usePageContext } from 'core/utils/context/pageContext';
import { ThemeWrapper } from 'core/utils/context/themeContext';
import { debounce } from 'core/utils/functions/general';
import themeData from 'core/utils/theme/themeData';

// ###############################################################
// <------------------------ Constants -------------------------->
// ###############################################################
// ###############################################################
// <---------------------- End Constants ------------------------>
// ###############################################################

const MainContainer = ({ children }) => {
  // ###############################################################
  // <------------------------- Globals --------------------------->
  // ###############################################################
  const pageData = usePageContext();
  const { languageData } = pageData;

  // const preventBodyScrolling = useSelector(state => state.common.preventBodyScrolling);
  // ###############################################################
  // <----------------------- End Globals ------------------------->
  // ###############################################################
  // ###############################################################
  // <------------------------ useState --------------------------->
  // ###############################################################
  const [theme, setTheme] = useState({
    ...themeData,
    direction: languageData.direction,
    isMobile: true,
    isTablet: true,
    isDesktop: true,
  });
  // ###############################################################
  // <---------------------- End useState ------------------------->
  // ###############################################################
  const calculateCurrentUserDeviceSize = () => {
    const screenWidth = document.body.clientWidth;

    const isMobile = screenWidth < theme.sizes.maxPhone + 1;
    const isTablet = screenWidth > theme.sizes.maxPhone && screenWidth < theme.sizes.maxTablet + 1;
    const isDesktop = screenWidth > theme.sizes.maxTablet;

    return {
      isMobile,
      isTablet,
      isDesktop,
    };
  };

  const updateCurrentUserDeviceSize = () => {
    const { isMobile, isTablet, isDesktop } = calculateCurrentUserDeviceSize();

    setTheme(prevState => ({
      ...prevState,
      isMobile,
      isTablet,
      isDesktop,
    }));
  };

  useEffect(() => {
    const { isMobile, isTablet, isDesktop } = calculateCurrentUserDeviceSize();

    setTheme(prevState => ({
      ...prevState,
      isMobile,
      isTablet,
      isDesktop,
    }));

    window.addEventListener('orientationchange', updateCurrentUserDeviceSize);
    window.addEventListener(
      'resize',
      debounce(() => updateCurrentUserDeviceSize(), 50, this),
    );
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  // ###############################################################
  // <------------------------ useEffect -------------------------->
  // ###############################################################
  // ###############################################################
  // <---------------------- End useEffect ------------------------>
  // ###############################################################
  // ###############################################################
  // <--------------------- rest of hooks ------------------------->
  // ###############################################################
  // ###############################################################
  // <-------------------- End rest of hooks ---------------------->
  // ###############################################################
  // ###############################################################
  // <-------------------------- Logic ---------------------------->
  // ###############################################################
  // ###############################################################
  // <------------------------ End Logic -------------------------->
  // ###############################################################
  // ###############################################################
  // <------------------------- Actions --------------------------->
  // ###############################################################
  // ###############################################################
  // <----------------------- End Actions ------------------------->
  // ###############################################################
  // ###############################################################
  // <----------------------- UI Handlers ------------------------->
  // ###############################################################
  // ###############################################################
  // <--------------------- End UI Handlers ----------------------->
  // ###############################################################
  // ###############################################################
  // <-------------------------- Render --------------------------->
  // ###############################################################
  // ###############################################################
  // <------------------------ End Render ------------------------->
  // ###############################################################
  // ###############################################################
  // <------------------------- Return UI ------------------------->
  // ###############################################################
  return (
    <ThemeWrapper data={theme}>
      <div className="flex min-h-screen flex-col">{children}</div>
    </ThemeWrapper>
  );
  // ###############################################################
  // <----------------------- End Return UI ----------------------->
  // ###############################################################
};

MainContainer.propTypes = {
  children: PropTypes.node.isRequired,
};

MainContainer.defaultProps = {};

export default MainContainer;
